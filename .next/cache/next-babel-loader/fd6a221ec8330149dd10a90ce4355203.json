{"ast":null,"code":"//get product\nexport const getProducts = (products, category, type, limit) => {\n  category = category && category.toLowerCase() === \"all\" ? \"\" : category;\n  const finalProducts = category ? products.filter(product => product.category.toLowerCase() === category.toLowerCase()) : products;\n\n  if (type && type === \"new\") {\n    const newProducts = finalProducts.filter(product => product.new);\n    return newProducts.slice(0, limit ? limit : newProducts.length);\n  } else {\n    return finalProducts && finalProducts.slice(0, limit ? limit : finalProducts.length);\n  }\n}; //get product by slug\n\nexport const getProductBySlug = (products, slug) => {\n  return slug ? products.find(product => product.slug.toLowerCase() === slug.toLowerCase()) : null;\n}; //sort product\n\nexport const getProductBySort = (products, type, limit) => {\n  function sortWithCondition(arr, value, reverse = false) {\n    let num = reverse ? -1 : 1;\n    return products.slice(0, limit ? limit : products.length).sort((a, b) => {\n      if (a[value] < b[value]) {\n        return -1 * num;\n      }\n\n      if (a[value] > b[value]) {\n        return 1 * num;\n      }\n\n      return 0;\n    });\n  }\n\n  if (!type || type === \"default\") {\n    return products;\n  } else if (type === \"az\") {\n    return sortWithCondition(products, \"name\");\n  } else if (type === \"za\") {\n    return sortWithCondition(products, \"name\", true);\n  } else if (type === \"lowToHigh\") {\n    return sortWithCondition(products, \"price\");\n  } else if (type === \"highToLow\") {\n    return sortWithCondition(products, \"price\", true);\n  } else {\n    return products.slice(0, limit ? limit : products.length);\n  }\n}; //get product by price\n\nexport const getProductByPrice = (products, from, to, limit) => {\n  if (from && !to) {\n    return products.filter(p => p.price > from);\n  } else if (!from && to) {\n    return products.filter(p => p.price < to);\n  } else if (!from && !to) {\n    return products;\n  } else {\n    return products.filter(p => p.price > from && p.price < to);\n  }\n}; //get product by brand\n\nexport const getProductByBrand = (products, brand) => {\n  return brand ? products.filter(p => p.brand.toLowerCase() === brand.toLowerCase()) : products;\n}; //get product by filter\n\nexport const getProductbyFilter = (products, sortType, category, from, to, brand, limit) => {\n  let sortedProduct;\n\n  if (category) {\n    let productCategory = getProducts(products, category);\n\n    if (to && !brand) {\n      let productPrice = getProductByPrice(productCategory, from, to);\n      sortedProduct = getProductBySort(productPrice, sortType);\n    } else if (!to && brand) {\n      let productBrand = getProductByBrand(productCategory, brand);\n      sortedProduct = getProductBySort(productBrand, sortType);\n    } else if (to && brand) {\n      let productBrand = getProductByBrand(productCategory, brand);\n      let productPrice = getProductByPrice(productCategory, from, to);\n      let commonProducts = productBrand.filter(o1 => productPrice.some(o2 => o1.id === o2.id));\n      sortedProduct = getProductBySort(commonProducts, sortType);\n    } else {\n      sortedProduct = getProductBySort(productCategory, sortType);\n    }\n  } else {\n    sortedProduct = getProductBySort(products, sortType);\n  }\n\n  return sortedProduct.slice(0, limit || products.length);\n};","map":{"version":3,"sources":["/home/hguruman/WORK/gents/tgs/src/common/productSelect.js"],"names":["getProducts","products","category","type","limit","toLowerCase","finalProducts","filter","product","newProducts","new","slice","length","getProductBySlug","slug","find","getProductBySort","sortWithCondition","arr","value","reverse","num","sort","a","b","getProductByPrice","from","to","p","price","getProductByBrand","brand","getProductbyFilter","sortType","sortedProduct","productCategory","productPrice","productBrand","commonProducts","o1","some","o2","id"],"mappings":"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","sourcesContent":["//get product\r\nexport const getProducts = (products, category, type, limit) => {\r\n  category = category && category.toLowerCase() === \"all\" ? \"\" : category;\r\n  const finalProducts = category\r\n    ? products.filter(\r\n        (product) => product.category.toLowerCase() === category.toLowerCase()\r\n      )\r\n    : products;\r\n  if (type && type === \"new\") {\r\n    const newProducts = finalProducts.filter((product) => product.new);\r\n    return newProducts.slice(0, limit ? limit : newProducts.length);\r\n  } else {\r\n    return (\r\n      finalProducts &&\r\n      finalProducts.slice(0, limit ? limit : finalProducts.length)\r\n    );\r\n  }\r\n};\r\n\r\n//get product by slug\r\nexport const getProductBySlug = (products, slug) => {\r\n  return slug\r\n    ? products.find(\r\n        (product) => product.slug.toLowerCase() === slug.toLowerCase()\r\n      )\r\n    : null;\r\n};\r\n\r\n//sort product\r\nexport const getProductBySort = (products, type, limit) => {\r\n  function sortWithCondition(arr, value, reverse = false) {\r\n    let num = reverse ? -1 : 1;\r\n    return products.slice(0, limit ? limit : products.length).sort((a, b) => {\r\n      if (a[value] < b[value]) {\r\n        return -1 * num;\r\n      }\r\n      if (a[value] > b[value]) {\r\n        return 1 * num;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n  if (!type || type === \"default\") {\r\n    return products;\r\n  } else if (type === \"az\") {\r\n    return sortWithCondition(products, \"name\");\r\n  } else if (type === \"za\") {\r\n    return sortWithCondition(products, \"name\", true);\r\n  } else if (type === \"lowToHigh\") {\r\n    return sortWithCondition(products, \"price\");\r\n  } else if (type === \"highToLow\") {\r\n    return sortWithCondition(products, \"price\", true);\r\n  } else {\r\n    return products.slice(0, limit ? limit : products.length);\r\n  }\r\n};\r\n\r\n//get product by price\r\nexport const getProductByPrice = (products, from, to, limit) => {\r\n  if (from && !to) {\r\n    return products.filter((p) => p.price > from);\r\n  } else if (!from && to) {\r\n    return products.filter((p) => p.price < to);\r\n  } else if (!from && !to) {\r\n    return products;\r\n  } else {\r\n    return products.filter((p) => p.price > from && p.price < to);\r\n  }\r\n};\r\n\r\n//get product by brand\r\nexport const getProductByBrand = (products, brand) => {\r\n  return brand\r\n    ? products.filter((p) => p.brand.toLowerCase() === brand.toLowerCase())\r\n    : products;\r\n};\r\n\r\n//get product by filter\r\nexport const getProductbyFilter = (\r\n  products,\r\n  sortType,\r\n  category,\r\n  from,\r\n  to,\r\n  brand,\r\n  limit\r\n) => {\r\n  let sortedProduct;\r\n  if (category) {\r\n    let productCategory = getProducts(products, category);\r\n    if (to && !brand) {\r\n      let productPrice = getProductByPrice(productCategory, from, to);\r\n      sortedProduct = getProductBySort(productPrice, sortType);\r\n    } else if (!to && brand) {\r\n      let productBrand = getProductByBrand(productCategory, brand);\r\n      sortedProduct = getProductBySort(productBrand, sortType);\r\n    } else if (to && brand) {\r\n      let productBrand = getProductByBrand(productCategory, brand);\r\n      let productPrice = getProductByPrice(productCategory, from, to);\r\n      let commonProducts = productBrand.filter((o1) =>\r\n        productPrice.some((o2) => o1.id === o2.id)\r\n      );\r\n      sortedProduct = getProductBySort(commonProducts, sortType);\r\n    } else {\r\n      sortedProduct = getProductBySort(productCategory, sortType);\r\n    }\r\n  } else {\r\n    sortedProduct = getProductBySort(products, sortType);\r\n  }\r\n  return sortedProduct.slice(0, limit || products.length);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}